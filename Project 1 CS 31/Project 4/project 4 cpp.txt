/*
Test:

tally				+
findmatch			+
potitionOfMin		+
moveToEnd			+
moveToBeginning
findDifference
eliminateDups
subsequence
makeMerger
seperate


Not working:
subsequence
eliminateDups
separate

Maybe working:
moveToEnd
tally
findMatch
findRun
positionOfMin
findDifference
*/

#include <iostream>
#include <string>
#include <cassert>
using namespace std;

int tally(const string a[], int n, string target);
int findMatch(const string a[], int n, string target);
bool findRun(const string a[], int n, string target, int& begin, int& end);
int positionOfMin(const string a[], int n);
int moveToEnd(string a[], int n, int pos);
int moveToBeginning(string a[], int n, int pos);
int findDifference(const string a1[], int n1, const string a2[], int n2);
int eliminateDups(string a[], int n);
bool subsequence(const string a1[], int n1, const string a2[], int n2);
int makeMerger(const string a1[], int n1, const string a2[], int n2,
	string result[], int max);
int separate(string a[], int n, string separator);


int main()
{
	string h[7] = { "romanoff", "thor", "rogers", "banner", "", "parker", "rogers" };
	assert(tally(h, 7, "rogers") == 2);
	assert(tally(h, 7, "") == 1);
	assert(tally(h, 7, "rhodes") == 0);
	assert(tally(h, 0, "rogers") == 0);
	assert(findMatch(h, 7, "rogers") == 2);
	assert(findMatch(h, 2, "rogers") == -1);
	int bg;
	int en;
	assert(findRun(h, 7, "banner", bg, en) && bg == 3 && en == 3);

	string g[4] = { "romanoff", "thor", "banner", "parker" };
	assert(positionOfMin(g, 4) == 2);
	assert(findDifference(h, 4, g, 4) == 2);
	
	//assert(subsequence(h, 7, g, 4));
	assert(moveToEnd(g, 4, 1) == 1 && g[1] == "banner" && g[3] == "thor");
	/*
	string f[4] = { "parker", "banner", "thor", "rogers" };
	assert(moveToBeginning(f, 4, 2) == 2 && f[0] == "thor" && f[2] == "banner");
	
	string e[5] = { "parker", "parker", "parker", "thor", "thor" };
	assert(eliminateDups(e, 5) == 2 && e[1] == "thor");
	
	string x[4] = { "rhodes", "rhodes", "tchalla", "thor" };
	string y[4] = { "banner", "parker", "rhodes", "rogers" };
	string z[10];
	assert(makeMerger(x, 4, y, 4, z, 10) == 8 && z[5] == "rogers");
	
	assert(separate(h, 7, "rogers") == 3);
	*/
	cout << "All tests succeeded" << endl;
}


int tally(const string a[], int n, string target)
{
	int tally = 0;
	if (n < 0)
	{
		return -1;
	}

	for (int k = 0; k < n; k++)
	{
		if (a[k] == target)
			tally++;
		else
			continue;
	}
	return tally;
}

int findMatch(const string a[], int n, string target)
{
	for (int k = 0; k < n; k++)
	{
		if (a[k] == target)
			return k;
		else
			continue;
	}
	return -1;
}

bool findRun(const string a[], int n, string target, int& begin, int& end)
{
	if (n < 0)
		return false;
	for (int k = 0; k < n; k++)
	{
		if (a[k] == target)
		{
			begin = k;
			end = k;
			for (int m = 1; m < (n - k); m++)	//double check operator in this line for fencepost error
			{
				if (a[k + m] == target)
					end++;
				else
					return true;
			}
		}
		else
			continue;
	}
	return false;
}

int positionOfMin(const string a[], int n)
{
	if (n <= 0)
		return -1;

	string lowest = a[0];
	for (int k = 0; k < n; k++)
	{
		if (a[k] <= lowest)
			lowest = a[k];
	}
	for (int j = 0; j < n; j++)
	{
		if (a[j] == lowest)
		{
			return j;
		}
		else
			continue;

	}

	return 0; //only if n is less than the size of the array
}

int moveToEnd(string a[], int n, int pos)
{
	string end = a[pos];
	for (int k = pos; k < (n-1); k++)
	{
		a[k] = a[k + 1];
	}
	a[n - 1] = end;
	return 1;
}

int moveToBeginning(string a[], int n, int pos)
{
	string first = a[pos];
	for (int k = (pos); k >= 1; k -= 1)
	{
		a[k] = a[k - 1];
	}
	a[0] = first;
	return pos;
}

int findDifference(const string a1[], int n1, const string a2[], int n2)
{
	for (int k = 0; k < n1 && k < n2; k++)
	{
		if (a1[k] == a2[k])
			continue;
		else
			return k;
	}
	if (n1 > n2)
		return n2;
	if (n2 > n1)
		return n1;

	return 0;	//case where the arrays are the same
}

int eliminateDups(string a[], int n)
{
	int i = 1;
	for (int k = 0; k < n - 1; k++)
	{
		if (a[k + 1] == a[k])
		{
			for (int j = 1; j < (n - k - 1); j++)
			{
				a[k + j] = a[k + j + 1];
			}
		}
		else
		{
			i++;
			continue;
		}
	}
	return i;
}

bool subsequence(const string a1[], int n1, const string a2[], int n2)
{
	int i = 0;
	for (int k = 0; k < n1 && i < n2; k++)
	{
		if (a1[k] == a2[i])
		{
			i++;
			continue;
		}
		else
			continue;
	}
	if (i == (n2 - 1))
	{
		return true;
	}
	else
		return false;
}

int makeMerger(const string a1[], int n1, const string a2[], int n2,
	string result[], int max)
{
	int i = 0;

	if ((n1 + n2) > max)
		return -1;

	for (int k = 0; k < n1; k++)
	{
		if (a1[k] < a2[i])
		{
			result[k] = a1[k];
			continue;
		}
		else
		{
			i++;
			result[k] = a2[i];
			k--;
			continue;
		}
	}
	return (n1 + n2);
}

int separate(string a[], int n, string separator)
{
	int i = 0;
	int j = 1;
	int R;

	for (int l = 0; l < n; l++)
	{
		if (a[l] > separator)
		{
			R = l;
			break;
		}
	}

	for (int k = 0; k < n; k++)
	{
		if (a[k] <= separator)
		{
			string temp = a[k];		//these three lines swap the two strings (temp = temporary)
			a[k] = a[i];
			a[i] = temp;
			i++;
			continue;
		}
		else
		{
			string temp = a[k];	//swap strings as well
			a[k] = a[n - j];
			a[n - j] = a[k];
			j++;
			continue;
		}
	}
	return R;
	return n;	//if there are no strings greater than separator
}
